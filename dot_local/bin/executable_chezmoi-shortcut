#!/usr/bin/env python3
import os
import pathlib
import subprocess
import hashlib

shortcuts = [
    'chezmoi apply -Rvn --force | LESS="Rmc" delta --features "default paging"',
    'chezmoi apply -vn --force | LESS="Rmc" delta --features "default paging"',
    'chezmoi apply -v',
    'EXECUTE_CHEZMOIEXTERNAL=true chezmoi execute-template < .chezmoiexternal.yaml | bat -l yaml',
    'chezmoi state delete-bucket --bucket=scriptState',
]


def bat(cmd):
    bat_cmd = subprocess.Popen(
        ['bat', '--language=zsh', '--plain', '--color=always'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE
    )
    stdout, _ = bat_cmd.communicate(cmd.encode())
    return stdout.decode()


def get_chezmoi_source_path():
    chezmoi_cmd = subprocess.Popen(
        ['chezmoi', 'source-path'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE
    )
    stdout, _ = chezmoi_cmd.communicate()
    return stdout.decode().strip()


def get_coloured_shortcuts_str():
    md5 = hashlib.md5()
    md5.update('\n'.join(shortcuts).encode('utf-8'))
    md5_result = md5.hexdigest()
    cache_dir = os.environ.get('XDG_CACHE_HOME', os.path.expanduser('~/.cache'))
    cache_file = os.path.join(cache_dir, f'chezmoi-shortcut.{md5_result}.cache')
    try:
        with open(cache_file) as fp:
            coloured_shortcuts_str = fp.read()
    except Exception as ignored:
        _ = ignored
        os.chdir(get_chezmoi_source_path())
        [os.remove(_) for _ in pathlib.Path(cache_dir).glob('chezmoi-shortcut.*.cache')]
        coloured_shortcuts_str = '\n'.join([bat(c) for c in shortcuts])
        with open(cache_file, mode='w') as fp:
            fp.write(coloured_shortcuts_str)
    return coloured_shortcuts_str


def main():
    fzf_cmd = subprocess.Popen(
        ['fzf', '--ansi'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE
    )
    fzf_cmd_stdout, _ = fzf_cmd.communicate(get_coloured_shortcuts_str().encode('utf-8'))
    if fzf_cmd.returncode != 0:
        exit(fzf_cmd.returncode)

    selected = fzf_cmd_stdout.decode().strip()

    os.execvp('zsh', ['zsh', '-ci', selected])


if __name__ == '__main__':
    main()

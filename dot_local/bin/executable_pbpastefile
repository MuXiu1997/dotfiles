#!/usr/bin/env python3
import argparse
import pathlib
import subprocess

script = '''
use framework "Appkit"
use Finder : application "Finder"

property this : a reference to current application
property NSFileManager : a reference to NSFileManager of this
property NSImage : a reference to NSImage of this
property NSMutableArray : a reference to NSMutableArray of this
property NSPasteboard : a reference to NSPasteboard of this
property NSString : a reference to NSString of this
property NSURL : a reference to NSURL of this

property pb : missing value

on run argv
	if (count of argv) < 1 then
		error "Usage: paste_to_directory <destination_directory> [overwrite]"
	end if

	set destinationDirectory to (item 1 of argv) as text
	set overwrite to false
	if (count of argv) is 2 then
		set overwrite to (item 2 of argv) as text is "true"
	end if

	init()
	pasteFilesToDirectory(destinationDirectory, overwrite)
end run

to init()
	set pb to NSPasteboard's generalPasteboard()
end init

to pasteFilesToDirectory(destinationDirectory, overwrite)
	if pb = missing value then init()

	set dp to (NSString's stringWithString:destinationDirectory)'s Â¬
            stringByStandardizingPath()

	set dURL to NSURL's fileURLWithPath:dp
	set dPath to (dURL's path()) as text

	set fileURLs to (pb's readObjectsForClasses:{NSURL} options:{})
	if fileURLs is missing value then
		error "No files in clipboard"
	end if

	set fileManager to NSFileManager's defaultManager()
	repeat with fileURL in fileURLs
		set sourcePath to (fileURL's |path|()) as text
		set destinationPath to (dPath & "/" &(fileURL's lastPathComponent()) as text)
		if overwrite then
			if (fileManager's fileExistsAtPath:destinationPath) then
				fileManager's removeItemAtPath:destinationPath |error|:(missing value)
			end if
		end if
		fileManager's copyItemAtPath:sourcePath toPath:destinationPath |error|:(missing value)
	end repeat
end pasteFilesToDirectory
'''

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'dest',
        help='The directory where the files will be pasted to',
        type=pathlib.Path,
        metavar='PATH'
    )
    parser.add_argument(
        '--overwrite',
        help='Overwrite existing files',
        action='store_true'
    )
    args = parser.parse_args()
    dest = str(args.dest.resolve())
    overwrite = 'true' if args.overwrite else 'false'
    p = subprocess.Popen(
        ['osascript', '-', dest, overwrite],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        universal_newlines=True
    )
    stdout, _ = p.communicate(script)
    if not stdout.startswith('true'):
        exit(1)

if __name__ == '__main__':
    main()
